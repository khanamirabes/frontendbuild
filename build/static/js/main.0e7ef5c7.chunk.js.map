{"version":3,"sources":["components/node.component.jsx","components/ButtonEdge.js","App.js","reportWebVitals.js","index.js"],"names":["initialElements","id","type","data","label","onClick","alert","className","src","height","alt","position","x","y","source","target","edgeTypes","buttonedge","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","arrowHeadType","markerEndId","edgePath","getBezierPath","markerEnd","getMarkerEnd","getEdgeCenter","edgeCenterX","edgeCenterY","useState","show","setShow","handleClose","onEdgeClick","evt","stopPropagation","d","width","foreignObjectSize","requiredExtensions","event","Modal","onHide","Header","closeButton","Title","name","rows","cols","placeholder","margin","Footer","Button","variant","onLoad","reactFlowInstance","console","log","fitView","MindNode","elements","setElements","setName","thumbnail","setThumbnail","url","setUrl","err","setErr","fetchScenes","Axios","get","then","res","array","forEach","item","temp","vedio_url","push","JSON","parse","postion","e","concat","catch","sourceHandle","targetHandle","useEffect","onConnect","params","els","addEdge","post","onElementsRemove","elementsToRemove","removeElements","connectionLineStyle","stroke","strokeWidth","connectionLineType","snapToGrid","snapGrid","onEdgeUpdate","oldEdge","newConnection","updateEdge","onNodeDragStop","node","stringify","put","color","gap","nodeColor","nodeStrokeWidth","onChange","value","trim","length","Math","random","window","innerWidth","innerHeight","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e7ef5c7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Axios from 'axios'\r\n\r\nimport ReactFlow, {addEdge, updateEdge, Background, Controls, MiniMap, removeElements} from 'react-flow-renderer';\r\nimport ButtonEdge from './ButtonEdge';\r\n\r\nconst initialElements = [\r\n  { id: '-1', type: 'input', data: { label:\r\n    <div onClick = {()=>alert(\"You are Welcome to scene 1\")}>\r\n       <div className=\"card\" >\r\n            <img className=\"card-img-top\" src=\"https://picsum.photos/200/300/?blur\"  height = '50px' alt=\"Card-image-cap\"/>\r\n               <div className=\"card-body\">\r\n                   <p className=\"card-text\">Starting Scene</p>\r\n               </div>\r\n       </div>\r\n    </div> }, position: { x: 0, y: 0 } },\r\n    { id: 'e1-2', source: '1', target: '2' },\r\n    ];\r\n\r\nconst edgeTypes = {\r\n      buttonedge: ButtonEdge,\r\n    };    \r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    console.log('flow loaded:', reactFlowInstance);\r\n    reactFlowInstance.fitView();\r\n  };\r\n\r\nconst MindNode = () => {\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n    const [name, setName] = useState(\"\")\r\n    const [thumbnail, setThumbnail] = useState(\"\")\r\n    const [url, setUrl] = useState(\"\")\r\n    const [err, setErr] = useState(\"\")\r\n\r\n    const onConnect = (params) =>{\r\n      setElements((els) => addEdge({ ...params, type: 'buttonedge' }, els));\r\n      console.log(\"This is param1\",params);\r\n      Axios.post(\"http://3.108.221.163:3001/insert/sceneflow\", params,).then(res=>{\r\n        console.log('THIS is add sceneFlow',res )\r\n        fetchScenes();\r\n      }).catch(err=>{\r\n        console.log(\"this is err in sceneFlow\", err)\r\n      })\r\n    };\r\n\r\n    const nodePositionUpdate = (event, node) =>{\r\n      console.log(\"node\", node)\r\n      let temp = {id: node.id, position:JSON.stringify(node.position)}\r\n      console.log(\"temp\", temp)\r\n      Axios.put(\"http://3.108.221.163:3001/videoscenes/position\", temp).then(res=>{\r\n        console.log('THIS is update nodePositionUpdate',res )\r\n        // fetchScenes();\r\n      }).catch(err=>{\r\n        console.log(\"this is err in nodePositionUpdate\", err)\r\n      })\r\n    };\r\n\r\n      // gets called after end of edge gets dragged to another source or target\r\n  const onEdgeUpdate = (oldEdge, newConnection) =>\r\n  setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n    const onElementsRemove = (elementsToRemove) => {\r\n      setElements((els) => removeElements(elementsToRemove, els))\r\n    };\r\n    \r\n    const fetchScenes = ()=>{\r\n      setElements(initialElements);\r\n      Axios.get(\"http://3.108.221.163:3001/fetchVedioScenes/1\").then(res=>{\r\n        console.log(\"this is a fetch scene\", res)\r\n        let array = [];\r\n        res.data.forEach((item)=>{\r\n            let temp = <div >\r\n       <div className=\"card\" >\r\n            <img className=\"card-img-top\" src={item.thumbnail} height = '50px' alt=\"Thubnail Image\"/>\r\n            <div className=\"card-body\"  onClick = {()=>alert(`You are Welcome to scene : ${item.name}` )}>\r\n                   <p className=\"card-text\">{item.name}</p>\r\n                   <p className=\"card-text\">{item.thumbnail}</p>\r\n                   <p className=\"card-text\">{item.vedio_url}</p>\r\n               </div>\r\n       </div>\r\n    </div>; \r\n          array.push({\r\n            id: item.id +\"\",\r\n            data:{ label:  temp},\r\n       position: JSON.parse(item.postion) \r\n      });\r\n\r\n        });\r\n        console.log(\"this is wat i want see on console\",array);\r\n        setElements(e=> e.concat(...array));\r\n        console.log(\"this is a array\", array)\r\n      }).catch(err=>{\r\n        console.log(\"this is err in vedioscene\", err)\r\n      })\r\n      \r\n      Axios.get(\"http://3.108.221.163:3001/fetchVedioScenesflow/1\").then(res=>{\r\n        console.log(\"this is a fetch scene\", res)\r\n        let array = [];\r\n        res.data.forEach((item)=>{\r\n        // setElements((els) => addEdge(params, els));\r\n        delete item[\"id\"];\r\n        item[\"id\"] = `reactflow__edge--${item.source+ item.sourceHandle+ \"-\"+item.target+ item.targetHandle}`;\r\n        item[\"type\"] = 'buttonedge';\r\n           array.push(item);\r\n      })\r\n      console.log(\"this is a fetchVedioScenesflow\", array)\r\n      setElements(e=> e.concat(...array));\r\n      }).catch(err=>{\r\n        console.log(\"this is err in vediosceneflow\", err)\r\n      })\r\n    }\r\n    useEffect(() => {\r\n      // Update the document title using the browser API\r\n      fetchScenes();\r\n    },[1]);\r\n    const addScene = ()=>{\r\n      if(name ==\"\" || name.trim().length == 0){\r\n          setErr(\"name can not be empty;\");\r\n          return;\r\n      }\r\n      if(thumbnail ==\"\" || thumbnail.trim().length == 0){\r\n        setErr(\"thumbnail url can not be empty;\");\r\n        return;\r\n        }\r\n      if(url ==\"\" || url.trim().length == 0){\r\n        setErr(\"vedio url can not be empty;\");\r\n        return;\r\n        }\r\n   \r\n      Axios.post(\"http://3.108.221.163:3001/insert\", {\r\n        name:name,\r\n        thumbnail:thumbnail,\r\n        vedio_url:url,\r\n        position: JSON.stringify({x:Math.random() * window.innerWidth, y:Math.random() * window.innerHeight})\r\n      }).then(res=>{\r\n        console.log('THIS is add scene',res )\r\n        fetchScenes();\r\n      }).catch(err=>{\r\n        console.log(\"this is err in addscene\", err)\r\n      })\r\n    }\r\n    console.log(\"this is an element, \", elements );\r\n    return (\r\n      \r\n        <>\r\n        <ReactFlow \r\n        elements={elements}\r\n        // onLoad={onLoad}\r\n        style = {{width:'100%',height:'90vh' }}\r\n        onConnect={onConnect}\r\n        onElementsRemove={onElementsRemove}\r\n        connectionLineStyle = {{stroke:\"#add\", strokeWidth:2}}\r\n        connectionLineType = 'bezier'\r\n      snapToGrid={true}\r\n      edgeTypes={edgeTypes}\r\n      snapGrid={[16, 16]}\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onLoad={onLoad}\r\n      onNodeDragStop ={nodePositionUpdate}\r\n\r\n      key=\"edge-with-button\"\r\n        >\r\n\r\n<Background\r\n      color='#888'\r\n      gap={16}\r\n      \r\n    />\r\n\r\n<MiniMap\r\n      nodeColor={(node) => {\r\n        switch (node.type) {\r\n          case 'input':\r\n            return 'red';\r\n          case 'default':\r\n            return '#00ff00';\r\n          case 'output':\r\n            return 'rgb(0,0,255)';\r\n          default:\r\n            return '#eee';\r\n        }\r\n      }}\r\n      nodeStrokeWidth={3}\r\n    />\r\n <Controls/>\r\n </ReactFlow>\r\n        \r\n            <div>\r\n                <input type=\"text\" \r\n                placeholder=\"name\"\r\n                onChange = {e=> setName(e.target.value)}\r\n                name='title'\r\n                />\r\n              \r\n                <input type=\"text\"\r\n                  placeholder=\"thumbnail url\"\r\n                onChange = {e=> setThumbnail(e.target.value)}\r\n                name='thumbnail'\r\n                 />\r\n                 <input type=\"text\"\r\n                  placeholder=\"video url\"\r\n                onChange = {e=> setUrl(e.target.value)}\r\n                name='url'\r\n                 />\r\n                \r\n                <button type = 'button'\r\n                onClick = {addScene}\r\n                >Add Scene</button>\r\n                <br/>\r\n                <br/>\r\n                 <span  className=\"error\">{err}</span>\r\n            </div>\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default MindNode","\r\nimport React, { useState } from 'react';\r\n\r\nimport {\r\n  getBezierPath,\r\n  getEdgeCenter,\r\n  getMarkerEnd,\r\n} from 'react-flow-renderer';\r\nimport { Button ,Modal} from 'react-bootstrap';\r\n// import './index.css';\r\n\r\nconst foreignObjectSize = 40;\r\n\r\n\r\nexport default function CustomEdge({\r\n  id,\r\n  sourceX,\r\n  sourceY,\r\n  targetX,\r\n  targetY,\r\n  sourcePosition,\r\n  targetPosition,\r\n  style = {},\r\n  data,\r\n  arrowHeadType,\r\n  markerEndId,\r\n}) {\r\n  const edgePath = getBezierPath({\r\n    sourceX,\r\n    sourceY,\r\n    sourcePosition,\r\n    targetX,\r\n    targetY,\r\n    targetPosition,\r\n  });\r\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\r\n  const [edgeCenterX, edgeCenterY] = getEdgeCenter({\r\n    sourceX,\r\n    sourceY,\r\n    targetX,\r\n    targetY,\r\n  });\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  const onEdgeClick = (evt, id) => {\r\n    evt.stopPropagation();\r\n    handleShow()\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <path\r\n        id={id}\r\n        style={style}\r\n        className=\"react-flow__edge-path\"\r\n        d={edgePath}\r\n        markerEnd={markerEnd}\r\n      />\r\n      <foreignObject\r\n        width={foreignObjectSize}\r\n        height={foreignObjectSize}\r\n        x={edgeCenterX - foreignObjectSize / 2}\r\n        y={edgeCenterY - foreignObjectSize / 2}\r\n        className=\"edgebutton-foreignobject\"\r\n        requiredExtensions=\"http://www.w3.org/1999/xhtml\"\r\n      >\r\n        <body>\r\n          <button\r\n            className=\"edgebutton\"\r\n            onClick={(event) => onEdgeClick(event, id)}\r\n          >\r\n            x\r\n          </button>\r\n        </body>\r\n      </foreignObject>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Scene Flow Rule</Modal.Title>\r\n        </Modal.Header>\r\n        <textarea id=\"w3review\" name=\"w3review\" rows=\"4\" cols=\"50\" placeholder = 'Enter scene rule script' style= {{margin: '10px'}}>\r\n\r\n</textarea>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Save \r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}","import React from 'react'\r\nimport MindNode from './components/node.component';\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className ='App'>\r\n      <MindNode/>\r\n\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}