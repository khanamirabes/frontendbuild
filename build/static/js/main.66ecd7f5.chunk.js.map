{"version":3,"sources":["components/Modal.js","components/node.component.jsx","components/ButtonEdge.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","class","tabindex","type","initialElements","id","data","label","onClick","alert","className","src","height","alt","position","x","y","source","target","edgeTypes","buttonedge","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","arrowHeadType","markerEndId","edgePath","getBezierPath","markerEnd","getMarkerEnd","getEdgeCenter","edgeCenterX","edgeCenterY","d","width","foreignObjectSize","requiredExtensions","event","stopPropagation","onLoad","reactFlowInstance","console","log","fitView","MindNode","useState","elements","setElements","name","setName","thumbnail","setThumbnail","url","setUrl","err","setErr","fetchScenes","Axios","get","then","res","array","forEach","item","temp","vedio_url","push","JSON","parse","postion","e","concat","catch","sourceHandle","targetHandle","useEffect","onConnect","params","els","addEdge","post","onElementsRemove","elementsToRemove","removeElements","connectionLineStyle","stroke","strokeWidth","connectionLineType","snapToGrid","snapGrid","onEdgeUpdate","oldEdge","newConnection","updateEdge","color","gap","nodeColor","node","nodeStrokeWidth","placeholder","onChange","value","trim","length","stringify","Math","random","window","innerWidth","innerHeight","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66ecd7f5.chunk.js","sourcesContent":[" import React from \"react\";\r\n\r\nconst Modal = () => {\r\n  return (\r\n    <>\r\n      <div class=\"modal\" tabindex=\"-1\">\r\n        <div class=\"modal-dialog\">\r\n          <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n              <h5 class=\"modal-title\">Modal title</h5>\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn-close\"\r\n                data-bs-dismiss=\"modal\"\r\n                aria-label=\"Close\"\r\n              ></button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n              <p>Modal body text goes here.</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-secondary\"\r\n                data-bs-dismiss=\"modal\"\r\n              >\r\n                Close\r\n              </button>\r\n              <button type=\"button\" class=\"btn btn-primary\">\r\n                Save changes\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Axios from 'axios'\r\n\r\nimport ReactFlow, {addEdge, updateEdge, Background, Controls, MiniMap, removeElements} from 'react-flow-renderer';\r\nimport ButtonEdge from './ButtonEdge';\r\n\r\nconst initialElements = [\r\n  { id: '-1', type: 'input', data: { label:\r\n    <div onClick = {()=>alert(\"You are Welcome to scene 1\")}>\r\n       <div className=\"card\" >\r\n            <img className=\"card-img-top\" src=\"https://picsum.photos/200/300/?blur\"  height = '50px' alt=\"Card-image-cap\"/>\r\n               <div className=\"card-body\">\r\n                   <p className=\"card-text\">Starting Scene</p>\r\n               </div>\r\n       </div>\r\n    </div> }, position: { x: 0, y: 0 } },\r\n    { id: 'e1-2', source: '1', target: '2' },\r\n    ];\r\n\r\nconst edgeTypes = {\r\n      buttonedge: ButtonEdge,\r\n    };    \r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    console.log('flow loaded:', reactFlowInstance);\r\n    reactFlowInstance.fitView();\r\n  };\r\n\r\nconst MindNode = () => {\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n    const [name, setName] = useState(\"\")\r\n    const [thumbnail, setThumbnail] = useState(\"\")\r\n    const [url, setUrl] = useState(\"\")\r\n    const [err, setErr] = useState(\"\")\r\n\r\n    \r\n\r\n    const onConnect = (params) =>{\r\n      setElements((els) => addEdge({ ...params, type: 'buttonedge' }, els));\r\n      console.log(\"This is param1\",params);\r\n      Axios.post(\"http://3.108.221.163:3001/insert/sceneflow\", params,).then(res=>{\r\n        console.log('THIS is add sceneFlow',res )\r\n        fetchScenes();\r\n      }).catch(err=>{\r\n        console.log(\"this is err in sceneFlow\", err)\r\n      })\r\n    \r\n    };\r\n\r\n      // gets called after end of edge gets dragged to another source or target\r\n  const onEdgeUpdate = (oldEdge, newConnection) =>\r\n  setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n    const onElementsRemove = (elementsToRemove) => {\r\n      setElements((els) => removeElements(elementsToRemove, els))\r\n    };\r\n    const fetchScenes = ()=>{\r\n      setElements(initialElements);\r\n      Axios.get(\"http://3.108.221.163:3001/fetchVedioScenes/1\").then(res=>{\r\n        console.log(\"this is a fetch scene\", res)\r\n        let array = [];\r\n        res.data.forEach((item)=>{\r\n            let temp = <div >\r\n       <div className=\"card\" >\r\n            <img className=\"card-img-top\" src={item.thumbnail} height = '50px' alt=\"Thubnail Image\"/>\r\n            \r\n               <div className=\"card-body\"  onClick = {()=>alert(`You are Welcome to scene : ${item.name}` )}>\r\n                   <p className=\"card-text\">{item.name}</p>\r\n                   <p className=\"card-text\">{item.thumbnail}</p>\r\n                   <p className=\"card-text\">{item.vedio_url}</p>\r\n               </div>\r\n       </div>\r\n    </div>; \r\n          array.push({\r\n            id: item.id +\"\",\r\n            data:{ label:  temp},\r\n       position: JSON.parse(item.postion) \r\n      });\r\n\r\n        });\r\n        console.log(\"this is wat i want see on console\",array);\r\n        setElements(e=> e.concat(...array));\r\n  \r\n        console.log(\"this is a array\", array)\r\n\r\n      \r\n      }).catch(err=>{\r\n        console.log(\"this is err in vedioscene\", err)\r\n      })\r\n      \r\n      Axios.get(\"http://3.108.221.163:3001/fetchVedioScenesflow/1\").then(res=>{\r\n        console.log(\"this is a fetch scene\", res)\r\n        let array = [];\r\n        res.data.forEach((item)=>{\r\n        // setElements((els) => addEdge(params, els));\r\n        delete item[\"id\"];\r\n        item[\"id\"] = `reactflow__edge--${item.source+ item.sourceHandle+ \"-\"+item.target+ item.targetHandle}`;\r\n        item[\"type\"] = 'buttonedge';\r\n           array.push(item);\r\n      })\r\n      console.log(\"this is a fetchVedioScenesflow\", array)\r\n      setElements(e=> e.concat(...array));\r\n      }).catch(err=>{\r\n        console.log(\"this is err in vediosceneflow\", err)\r\n      })\r\n    }\r\n    useEffect(() => {\r\n      // Update the document title using the browser API\r\n      fetchScenes();\r\n    },[1]);\r\n    const addScene = ()=>{\r\n      if(name ==\"\" || name.trim().length == 0){\r\n          setErr(\"name can not be empty;\");\r\n          return;\r\n      }\r\n      if(thumbnail ==\"\" || thumbnail.trim().length == 0){\r\n        setErr(\"thumbnail url can not be empty;\");\r\n        return;\r\n        }\r\n      if(url ==\"\" || url.trim().length == 0){\r\n        setErr(\"vedio url can not be empty;\");\r\n        return;\r\n        }\r\n   \r\n      Axios.post(\"http://3.108.221.163:3001/insert\", {\r\n        name:name,\r\n        thumbnail:thumbnail,\r\n        vedio_url:url,\r\n        position: JSON.stringify({x:Math.random() * window.innerWidth, y:Math.random() * window.innerHeight})\r\n      }).then(res=>{\r\n        console.log('THIS is add scene',res )\r\n        fetchScenes();\r\n      }).catch(err=>{\r\n        console.log(\"this is err in addscene\", err)\r\n      })\r\n    }\r\n    console.log(\"this is an element, \", elements );\r\n    return (\r\n      \r\n        <>\r\n        <ReactFlow \r\n        elements={elements}\r\n        // onLoad={onLoad}\r\n        style = {{width:'100%',height:'90vh' }}\r\n        onConnect={onConnect}\r\n        onElementsRemove={onElementsRemove}\r\n        connectionLineStyle = {{stroke:\"#add\", strokeWidth:2}}\r\n        connectionLineType = 'bezier'\r\n      snapToGrid={true}\r\n      edgeTypes={edgeTypes}\r\n      snapGrid={[16, 16]}\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onLoad={onLoad}\r\n\r\n      key=\"edge-with-button\"\r\n        >\r\n\r\n<Background\r\n      color='#888'\r\n      gap={16}\r\n      \r\n    />\r\n\r\n<MiniMap\r\n      nodeColor={(node) => {\r\n        switch (node.type) {\r\n          case 'input':\r\n            return 'red';\r\n          case 'default':\r\n            return '#00ff00';\r\n          case 'output':\r\n            return 'rgb(0,0,255)';\r\n          default:\r\n            return '#eee';\r\n        }\r\n      }}\r\n      nodeStrokeWidth={3}\r\n    />\r\n <Controls/>\r\n </ReactFlow>\r\n        \r\n            <div>\r\n                <input type=\"text\" \r\n                placeholder=\"name\"\r\n                onChange = {e=> setName(e.target.value)}\r\n                name='title'\r\n                />\r\n              \r\n                <input type=\"text\"\r\n                  placeholder=\"thumbnail url\"\r\n                onChange = {e=> setThumbnail(e.target.value)}\r\n                name='thumbnail'\r\n                 />\r\n                 <input type=\"text\"\r\n                  placeholder=\"video url\"\r\n                onChange = {e=> setUrl(e.target.value)}\r\n                name='url'\r\n                 />\r\n                \r\n                <button type = 'button'\r\n                onClick = {addScene}\r\n                >Add Scene</button>\r\n                <br/>\r\n                <br/>\r\n                 <span  className=\"error\">{err}</span>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n    \r\n}\r\nexport default MindNode","import React from 'react';\r\nimport Modal from './Modal'\r\nimport {\r\n  getBezierPath,\r\n  getEdgeCenter,\r\n  getMarkerEnd,\r\n} from 'react-flow-renderer';\r\n\r\n// import './index.css';\r\n\r\nconst foreignObjectSize = 40;\r\n\r\nconst onEdgeClick = (evt, id) => {\r\n  evt.stopPropagation();\r\n  // alert(`remove ${id}`);\r\n\r\n    // const data = window.prompt(\"Give me data\", \"\");\r\n    // console.log(\"this is data\",data);\r\n    return(\r\n  <Modal/>\r\n    )\r\n\r\n\r\n};\r\n\r\nexport default function CustomEdge({\r\n  id,\r\n  sourceX,\r\n  sourceY,\r\n  targetX,\r\n  targetY,\r\n  sourcePosition,\r\n  targetPosition,\r\n  style = {},\r\n  data,\r\n  arrowHeadType,\r\n  markerEndId,\r\n}) {\r\n  const edgePath = getBezierPath({\r\n    sourceX,\r\n    sourceY,\r\n    sourcePosition,\r\n    targetX,\r\n    targetY,\r\n    targetPosition,\r\n  });\r\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\r\n  const [edgeCenterX, edgeCenterY] = getEdgeCenter({\r\n    sourceX,\r\n    sourceY,\r\n    targetX,\r\n    targetY,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <path\r\n        id={id}\r\n        style={style}\r\n        className=\"react-flow__edge-path\"\r\n        d={edgePath}\r\n        markerEnd={markerEnd}\r\n      />\r\n      <foreignObject\r\n        width={foreignObjectSize}\r\n        height={foreignObjectSize}\r\n        x={edgeCenterX - foreignObjectSize / 2}\r\n        y={edgeCenterY - foreignObjectSize / 2}\r\n        className=\"edgebutton-foreignobject\"\r\n        requiredExtensions=\"http://www.w3.org/1999/xhtml\"\r\n      >\r\n        <body>\r\n          <button\r\n            className=\"edgebutton\"\r\n            onClick={(event) => onEdgeClick(event, id)}\r\n          >\r\n            x\r\n          </button>\r\n        </body>\r\n      </foreignObject>\r\n    </>\r\n  );\r\n}","import React from 'react'\nimport MindNode from './components/node.component';\nimport './App.css'\n\nconst App = () => {\n  return (\n    <div className ='App'>\n      <MindNode/>\n\n    \n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}